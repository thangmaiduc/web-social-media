//=====================model user
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class User extends Model {
    static associate(models) {
      User.hasMany(models.Post, {
        foreignKey: 'userId',
        as: 'posts',
      });
      User.hasMany(models.Message, {
        foreignKey: 'senderId',
      });
      User.hasMany(models.Message, {
        foreignKey: 'senderId',
      });
      User.belongsToMany(models.Conversation, {
        foreignKey: 'userId',
        through: models.Participant,
        onDelete: 'CASCADE',
      });
      User.belongsToMany(models.User, {
        as: 'FollowingMM',
        through: models.Follower,
        foreignKey: 'followingId',
        onDelete: 'CASCADE',
      });
      User.belongsToMany(models.User, {
        as: 'FollowedMM',
        through: models.Follower,
        foreignKey: 'followedId',
        onDelete: 'CASCADE',
      });
      User.belongsToMany(models.User, {
        as: 'ReportedMM',
        through: models.ReportUser,
        foreignKey: 'reportedId',
        onDelete: 'CASCADE',
      });
      User.belongsToMany(models.User, {
        as: 'ReportingMM',
        through: models.ReportUser,
        foreignKey: 'reportingId',
        onDelete: 'CASCADE',
      });
      User.hasMany(models.CommentPost, {
        foreignKey: 'userId',
        onDelete: 'CASCADE',
      });
      User.belongsToMany(models.Post, {
        through: models.LikePost,
        otherKey: 'postId',
        onDelete: 'CASCADE',
      });
      User.belongsToMany(models.Post, {
        through: models.ReportPost,
        foreignKey: 'userId',
        onDelete: 'CASCADE',
      });
      // * super Many -Many
      User.hasMany(models.LikePost, {
      });
      User.hasMany(models.Follower, {
        as: 'Followed',
        foreignKey: 'followedId',
      });
      User.hasMany(models.Follower, {
        as: 'Following',
        foreignKey: 'followingId',
      });
      User.hasMany(models.ReportUser, {
        as: 'Reported',
        foreignKey: 'reportedId',
      });
      User.hasMany(models.ReportUser, {
        as: 'Reporting',
        foreignKey: 'reportingId',
      });
      User.hasMany(models.ReportPost, {
        foreignKey: 'userId',
      });

    }
  }
  User.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      username: {
        type: DataTypes.STRING,
        unique: true,
        allowNull: false,
      },
      fullName: {
        type: DataTypes.STRING,
      },
      password: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
      profilePicture: {
        type: DataTypes.STRING,
        defaultValue: '',
      },
      coverPicture: {
        type: DataTypes.STRING,
        defaultValue: '',
      },

      isAdmin: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
      },
      isBlock: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
      },
      description: {
        type: DataTypes.STRING,
        max: 50,
      },
      city: {
        type: DataTypes.STRING,
        max: 50,
      },
      country: {
        type: DataTypes.STRING,
        max: 50,
      },
    },
    {
      sequelize,
      modelName: 'User',
      timestamps: true,
    }
  );
  return User;
};

//============model post
"use strict";
const { Model } = require("sequelize");
module.exports = (sequelize, DataTypes) => {
  class Post extends Model {
    static associate(models) {
      Post.belongsTo(models.User, {
        foreignKey: "userId",
        as: "user",
      });
      Post.belongsToMany(models.User, {
        through: models.LikePost,
        foreignKey: "postId",
        onDelete: "CASCADE",
      });
      Post.belongsToMany(models.User, {
        through: models.ReportPost,
        foreignKey: "postId",
        onDelete: "CASCADE",
      });
      Post.hasMany(models.CommentPost, {
        foreignKey: "postId",
        onDelete: "CASCADE",
      });
      // * super Many - Many
      Post.hasMany(models.ReportPost, {
        foreignKey: 'postId',
      });
      Post.hasMany(models.LikePost, {
        foreignKey: 'postId',
      });
    }
  }
  Post.init(
    {
      userId: {
        type: DataTypes.INTEGER,
        require: true,
        allowNull: false,
      },

      img: {
        type: DataTypes.STRING,
        defaultValue: "",
      },

      description: {
        type: DataTypes.STRING,
        max: 500,
      },
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      isBlock: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
      },
    },
    {
      sequelize,
      modelName: "Post",
      timestamps: true,
    }
  );
  return Post;
};
//============= model comment
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class CommentPost extends Model {
    static associate(models) {
      CommentPost.belongsTo(models.User, {
        foreignKey: "userId",
        as: "user",
      });
      CommentPost.belongsTo(models.Post, {
        foreignKey: "postId",
        as: "post",
      });
    }
  }
  CommentPost.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      postId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      userId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      text: {
        type: DataTypes.TEXT,
        allowNull: false,
      },
    },
    {
      sequelize,
      modelName: 'CommentPost',
    }
  );
  return CommentPost;
};
// =====================model like
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class LikePost extends Model {
    static associate(models) {
      LikePost.belongsTo(models.Post, {
        foreignKey: "postId",
      });
      LikePost.belongsTo(models.User, {
      });
    }
  }
  LikePost.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      postId: {
        type: DataTypes.INTEGER,
      },
    },
    {
      sequelize,
      modelName: 'LikePost',
    }
  );
  return LikePost;
};
// =====================model conversation
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Conversation extends Model {
    static associate(models) {
      Conversation.belongsTo(models.User, {
        foreignKey: 'creatorId',
      });
      Conversation.belongsToMany(models.User, {
        as:'participants',
        foreignKey: 'conversationId',
        through: models.Participant,
        onDelete: 'CASCADE',
      });
      Conversation.hasMany(models.Message, {
        foreignKey: 'conversationId',
      });
    }
  }
  Conversation.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      title: {
        type: DataTypes.STRING(40),
        defaultValue: '',
      },
      creatorId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
    },
    {
      sequelize,
      modelName: 'Conversation',
      timestamps: true,
    }
  );
  return Conversation;
};

//=============model follower
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Follower extends Model {
    static associate(models) {}
  }
  Follower.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      // id người đang theo dõi
      followingId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      // id người đang được theo dõi
      followedId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
    },
    {
      sequelize,
      modelName: 'Follower',
      timestamps: true,
    }
  );
  return Follower;
};
//=============model participant
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Participant extends Model {
    static associate(models) {
      Participant.belongsTo(models.Conversation, {
        foreignKey: "conversationId",
      });
      Participant.belongsTo(models.User, {
        foreignKey: "userId",
      });
    }
  }
  Participant.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      conversationId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      userId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      type: {
        type: DataTypes.ENUM('public', 'private'),
      },
    },
    {
      sequelize,
      modelName: 'Participant',
      timestamps: true,
    }
  );
  return Participant;
};

//=============model Attachment
'use strict';
const { Model } = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Attachment extends Model {
    static associate(models) {
      Attachment.belongsTo(models.Message, {
        foreignKey: 'messageId',
      });
    }
  }
  Attachment.init(
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      messageId: {
        type: DataTypes.INTEGER,
        allowNull: false,
      },
      thumbUrl: {
        type: DataTypes.STRING,
      },
      fileUrl: {
        type: DataTypes.STRING,
      },
    },
    {
      sequelize,
      modelName: 'Attachment',
      timestamps: true,
    }
  );
  return Attachment;
};



